{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Torixyna Project Documentation Warning This project is only available on Windows. Overview: Torixyna is an innovative library designed to simplify and optimize the development of applications on Windows. Its main goal is to reduce the amount of code needed to accomplish complex tasks such as managing speakers, registries, privileges, and much more... Torixyna is highly modular: you must specify preprocessor directives to include a particular module in your project. Without this, the module will not be integrated. This approach prevents unused modules from being added to the final program. In the long term, with the addition of many more modules, this method ensures that even professional projects remain lightweight and efficient, without generating gigantic executables. Torixyna thus allows developers to save valuable time while ensuring their applications stay optimized. Why choose Torixyna ? Simplicity : With its modular design, Torixyna reduces the complexity of interacting with Windows APIs. Performance : Using native Windows libraries, the library is optimized to run smoothly and efficiently. Save time : No more complex coding for each project, Torixyna offers you ready-to-use solutions. Documentation : Modules : This section provides an overview of all the available modules, along with a detailed description of each module and specific documentation for each one. Github du projet : https://github.com/Tina-1300/Torixyna Contributors Creator of the library : Tina Support for other projects OpenCVE Information Author : Tina Date : 25/02/2025 Version : 1.0.0 Copyright : 2025 Tina - All rights reserved","title":"Home"},{"location":"index.html#torixyna-project-documentation","text":"Warning This project is only available on Windows.","title":"Torixyna Project Documentation"},{"location":"index.html#overview","text":"Torixyna is an innovative library designed to simplify and optimize the development of applications on Windows. Its main goal is to reduce the amount of code needed to accomplish complex tasks such as managing speakers, registries, privileges, and much more... Torixyna is highly modular: you must specify preprocessor directives to include a particular module in your project. Without this, the module will not be integrated. This approach prevents unused modules from being added to the final program. In the long term, with the addition of many more modules, this method ensures that even professional projects remain lightweight and efficient, without generating gigantic executables. Torixyna thus allows developers to save valuable time while ensuring their applications stay optimized.","title":"Overview:"},{"location":"index.html#why-choose-torixyna","text":"Simplicity : With its modular design, Torixyna reduces the complexity of interacting with Windows APIs. Performance : Using native Windows libraries, the library is optimized to run smoothly and efficiently. Save time : No more complex coding for each project, Torixyna offers you ready-to-use solutions.","title":"Why choose Torixyna ?"},{"location":"index.html#documentation","text":"Modules : This section provides an overview of all the available modules, along with a detailed description of each module and specific documentation for each one.","title":"Documentation :"},{"location":"index.html#github-du-projet","text":"https://github.com/Tina-1300/Torixyna","title":"Github du projet :"},{"location":"index.html#contributors","text":"Creator of the library : Tina","title":"Contributors"},{"location":"index.html#support-for-other-projects","text":"OpenCVE","title":"Support for other projects"},{"location":"index.html#information","text":"Author : Tina Date : 25/02/2025 Version : 1.0.0 Copyright : 2025 Tina - All rights reserved","title":"Information"},{"location":"Torixyna/Torixyna.html","text":"Torixyna Modules 1) Speaker Management : Name : Speaker Version : 1.0.0 Author : Tina Resources : None New Features : New Features... Descripiton : description... Documentation : to find out more Compilation : g++ -O2 -Os -s -o test.exe test.cpp -lTorixyna -lole32 -lstdc++ -luuid & color 2) Registry Management : Name : Registry Version : 1.0.0 Author : Tina Resources : None New Features : New Features... Descripiton : description... Documentation : to find out more Compilation : g++ -Oz -O2 -Os -s -o test.exe test.cpp -lTorixyna & color Note This module will continue to be maintained and improved.","title":"Torixyna"},{"location":"Torixyna/Torixyna.html#torixyna-modules","text":"","title":"Torixyna Modules"},{"location":"Torixyna/Torixyna.html#1-speaker-management","text":"","title":"1) Speaker Management :"},{"location":"Torixyna/Torixyna.html#name-speaker","text":"","title":"Name : Speaker"},{"location":"Torixyna/Torixyna.html#version-100","text":"","title":"Version : 1.0.0"},{"location":"Torixyna/Torixyna.html#author-tina","text":"","title":"Author : Tina"},{"location":"Torixyna/Torixyna.html#resources-none","text":"","title":"Resources : None"},{"location":"Torixyna/Torixyna.html#new-features-new-features","text":"","title":"New Features : New Features..."},{"location":"Torixyna/Torixyna.html#descripiton-description","text":"","title":"Descripiton : description..."},{"location":"Torixyna/Torixyna.html#documentation-to-find-out-more","text":"","title":"Documentation : to find out more"},{"location":"Torixyna/Torixyna.html#compilation-g-o2-os-s-o-testexe-testcpp-ltorixyna-lole32-lstdc-luuid-color","text":"","title":"Compilation : g++ -O2 -Os -s -o test.exe test.cpp -lTorixyna -lole32 -lstdc++ -luuid &amp; color"},{"location":"Torixyna/Torixyna.html#2-registry-management","text":"","title":"2) Registry Management :"},{"location":"Torixyna/Torixyna.html#name-registry","text":"","title":"Name : Registry"},{"location":"Torixyna/Torixyna.html#version-100_1","text":"","title":"Version : 1.0.0"},{"location":"Torixyna/Torixyna.html#author-tina_1","text":"","title":"Author : Tina"},{"location":"Torixyna/Torixyna.html#resources-none_1","text":"","title":"Resources : None"},{"location":"Torixyna/Torixyna.html#new-features-new-features_1","text":"","title":"New Features : New Features..."},{"location":"Torixyna/Torixyna.html#descripiton-description_1","text":"","title":"Descripiton : description..."},{"location":"Torixyna/Torixyna.html#documentation-to-find-out-more_1","text":"","title":"Documentation : to find out more"},{"location":"Torixyna/Torixyna.html#compilation-g-oz-o2-os-s-o-testexe-testcpp-ltorixyna-color","text":"Note This module will continue to be maintained and improved.","title":"Compilation : g++ -Oz -O2 -Os -s -o test.exe test.cpp -lTorixyna &amp; color"},{"location":"Torixyna/Registry/Registry.html","text":"Registry Module Features Read, write, and delete registry keys, with support for all data types. Retrieve information about registry keys, including the value types stored and both the current and maximum size the registry can hold. Modify parameters such as changing the desktop background, enabling or disabling file extensions, and more. Compilation To use the Registry module, you must compile your program with the following options: g++ -Oz -O2 -Os -s -o test.exe test.cpp -lTorixyna & color Les Structures : RegistrySizeInfo : A structure that stores the current size and maximum size of the registry. RegistryValueInfo : A structure that stores the type of the registry key (e.g., REG_SZ, REG_DWORD, etc.). Class Luna : Method : Write() Description : Overloaded method for writing to the registry. Settings : params1 : The path to the registry key. params2 : The name of the registry key that holds the value. params3 : The value to be stored in the registry. Returned value : bool : Returns true if the operation was successful. Example of use : #define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::Luna luna(HKEY_CURRENT_USER); // ---------------------------- Write DWORD value in the registry ---------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"testDWORD\"; DWORD value = 12345; if(luna.Write(registryPath, keyName, value) == true){ std::cout << \"Value successfully written\" << \"\\n\"; std::cin.get(); }else{ std::cerr << \"Failed to write value.\" << \"\\n\"; std::cin.get(); } //------------------------------------------------------------------------------------- // ------------------------- Write REG_SZ value in the registry ------------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"testString\"; const wchar_t* value = L\"Alex\"; if(luna.Write(registryPath, keyName, value) == true){ std::cout << \"Value successfully written\" << \"\\n\"; std::cin.get(); }else{ std::cerr << \"Failed to write value.\" << \"\\n\"; std::cin.get(); } // ----------------------------------------------------------------------------------- // ------------------------- Write BINARY value in the registry ---------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"testBinary\"; BYTE value[] = { 0x01, 0x02, 0x03, 0x04 }; if(luna.Write(registryPath, keyName, value) == true){ std::cout << \"Value successfully written\" << \"\\n\"; std::cin.get(); }else{ std::cerr << \"Failed to write value.\" << \"\\n\"; std::cin.get(); } // ------------------------------------------------------------------------------------ // ------------------------ Write QWORD value in the registry ------------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"testQword\"; unsigned __int64 value = 1234567890123456; if(luna.Write(registryPath, keyName, value) == true){ std::cout << \"Value successfully written\" << \"\\n\"; std::cin.get(); }else{ std::cerr << \"Failed to write value.\" << \"\\n\"; std::cin.get(); } // ----------------------------------------------------------------------------------- // -------------------- Write REG_MULTI_SZ value in the registry --------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"MaValeurMultiSZ\"; std::vector<std::wstring> values = {L\"Valeur1\", L\"Valeur2\", L\"Valeur3\"}; if (luna.Write( registryPath, keyName, values) == true){ std::cout << \"Value successfully written\" << \"\\n\"; }else{ std::cout << \"Failed to write value.\" << \"\\n\"; } // ------------------------------------------------------------------------------------- // ------------------- Write REG_EXPAND_SZ value in the registry ----------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"MaValeurExpandSZ\"; if (luna.Write(registryPath, keyName, L\"%SystemRoot%\\\\System32\") == true){ std::cout << \"Value successfully written\" << \"\\n\"; }else{ std::cout << \"Failed to write value.\" << \"\\n\"; } // ------------------------------------------------------------------------------------- return 0; }; Method : Read() Description : Reads the content of a registry key. This method is overloaded. Settings : params1 : The path to the registry key. params2 : The name of the registry key holding the value. params3 : A variable to store the value read. Returned value : bool : Returns true if the operation was successful. Example of use : #define INCLUDE_REGISTRE #include <iostream> #include <iomanip> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::Luna luna(HKEY_CURRENT_USER); // ------------------------ Read BINARY value ------------------------------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"test\"; std::vector<BYTE> binaryData; if (luna.Read(registryPath, keyName, binaryData)){ std::wcout << L\"Binary value read : \"; for (size_t i = 0; i < binaryData.size(); i++){ std::wcout << std::hex << std::setw(2) << std::setfill(L'0') << (int)binaryData[i] << L\" \"; } std::wcout << std::endl; }else{ std::cout << \"Failed to read binary value.\" << \"\\n\"; } //---------------------------------------------------------------------------------------- //------------------------------ Read REG_MULTI_SZ --------------------------------------- std::vector<std::wstring> values; if (luna.Read(L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", L\"MaValeurMultiSZ\", values)){ std::wcout << L\"Valeur REG_MULTI_SZ lue avec succ\u00e8s :\\n\"; for (const auto& val : values){ std::wcout << L\" - \" << val << \"\\n\"; } }else{ std::wcout << L\"Failed to read REG_MULTI_SZ value.\" << \"\\n\"; } // ----------------------------------------------------------------------------------------- //------------------------------ Read REG_EXPAND_SZ ----------------------------------------- std::wstring value; if (luna.Read(L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", L\"MaValeurExpandSZ\", value)){ std::wcout << L\"Valeur REG_EXPAND_SZ value read : \" << value << \"\\n\"; }else{ std::cout << \"Failed to read REG_EXPAND_SZ value\" << \"\\n\"; } // ------------------------------------------------------------------------------------------- // ----------------------------- Read REG_SZ ------------------------------------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"OneDrive\"; std::wstring value; if (Read(registryPath, keyName, value)){ std::wcout << L\"wstring Value : \" << value << \"\\n\"; }else{ std::wcout << L\"ERROR\" << \"\\n\"; } // ------------------------------------------------------------------------------------------- //--------------------------------- Read DWORD ------------------------------------------------ DWORD value; if(luna.Read(L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", L\"testDWORD\", value) == true){ std::cout << \"The value is : \" << value << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } // -------------------------------------------------------------------------------------------- // ---------------------------------- Read QWORD ---------------------------------------------- unsigned __int64 val; if(luna.Read(L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", L\"testQword\", val) == true){ std::cout << \"The value is : \" << val << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } // --------------------------------------------------------------------------------------------- return 0; } Method : Delete() Description : Deletes a registry key. Settings : const wchar_t * Register : The path to the registry key. const WCHAR * NameKey : The name of the registry key to delete. Returned value : bool : Returns true if the operation was successful. Example of use : #define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::Luna luna(HKEY_CURRENT_USER); const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"test\"; if(luna.Delete(registryPath, keyName) == true){ std::cout << \"Key successfully deleted\" << \"\\n\"; std::cin.get(); }else{ std::cerr << \"Error\" << \"\\n\"; std::cin.get(); } return 0; } Class LunaInfo : Method : GetSizeRegistry() Description : Retrieves the current size and maximum size of the registry, storing the values in the structure passed as a parameter in MB. Settings : RegistrySizeInfo& data : A structure holding the current and maximum size values. Returned value : bool : Returns true if the operation was successful. Example of use : #define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaInfo luna(HKEY_CURRENT_USER); Torixyna::Registry::RegistrySizeInfo info; if(luna.GetSizeRegistry(info) == true){ std::cout << \"Current size : \" << info.currentSize << \"\\n\"; std::cout << \"Maximum size : \" << info.maxSize << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } return 0; } Method : GetRegisterTypeValue() Description : Retrieves the type of value stored in a registry key (e.g., REG_SZ, REG_DWORD, REG_BINARY, REG_QWORD, REG_MULTI_SZ, REG_EXPAND_SZ, REG_NONE, REG_LINK). Settings : const wchar_t * Register : The path to the registry. const wchar_t* valueName : The name of the key to check. RegistryValueInfo& data : A structure that stores the type of value stored in the registry key. Returned value : bool : Returns true if the operation was successful. Example of use : #define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaInfo luna(HKEY_CURRENT_USER); Torixyna::Registry::RegistryValueInfo info; if (luna.GetRegisterTypeValue(L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", L\"testQword\", info) == true){ if(info.valueNameT == REG_QWORD){ std::cout << \"The value is a QWORD\" << \"\\n\"; } } return 0; } class LunaConfig : Method : SetsFileExtensionsVisibility() Description : This method allows you to enable or disable the visibility of file extensions. If the parameter showExtensions is set to true, the file extensions are displayed. If the parameter is set to false, the file extensions are hidden. The method returns true if everything was successful. Settings : bool showExtensions : parameter showExtensions. Returned value : bool : The method returns true if everything was successful. Example of use : #define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaConfig l; if (l.SetsFileExtensionsVisibility(true)){ std::cout << \"Les extension des fichier sont visible\" << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } return 0; } Method : SetsShowItemsHide() Description : Sets the visibility of hidden items. If set to true, hidden items are displayed. If set to false, hidden items are not displayed. The method returns false if there is an error, and true if there is no error. Settings : bool Status : parameter Status. Returned value : bool : The method returns false if there is an error, and true if there is no error.. Example of use : #define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaConfig l; if (l.SetsShowItemsHide(true)){ std::cout << \"affiche les \u00e9l\u00e9ments masquer\" << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } return 0; } Method : SetsTheStatusOfCheckboxes() Description : Sets the status of checkboxes. Activates checkboxes if the 'Status' parameter is set to true. Deactivates checkboxes if the 'Status' parameter is set to false. This method returns true if the operation is successful. Settings : bool Status : parameter Status. Returned value : bool : This method returns true if the operation is successful. Example of use : #define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaConfig l; if (l.SetsTheStatusOfCheckboxes(true)){ std::cout << \"Les cases \u00e0 coch\u00e9 sont activer\" << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } return 0; } Method : SetWallpaper() Description : Method to set the wallpaper This method takes the image path as a parameter. It returns false if there is an error and true if everything goes well. Settings : const std::wstring& imagePath : Attend le chemin ver l'image. Returned value : bool : This method returns true if the operation is successful. Example of use : #define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaConfig l; const wchar_t* pathWalpper = L\"Background.jpg\"; if (l.SetWallpaper(pathWalpper)){ std::cout << \"Le fond d'\u00e9cran \u00e0 bien \u00e9t\u00e9 modifier\" << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } return 0; }","title":"Registry Module"},{"location":"Torixyna/Registry/Registry.html#registry-module","text":"","title":"Registry Module"},{"location":"Torixyna/Registry/Registry.html#features","text":"Read, write, and delete registry keys, with support for all data types. Retrieve information about registry keys, including the value types stored and both the current and maximum size the registry can hold. Modify parameters such as changing the desktop background, enabling or disabling file extensions, and more.","title":"Features"},{"location":"Torixyna/Registry/Registry.html#compilation","text":"To use the Registry module, you must compile your program with the following options: g++ -Oz -O2 -Os -s -o test.exe test.cpp -lTorixyna & color","title":"Compilation"},{"location":"Torixyna/Registry/Registry.html#les-structures","text":"RegistrySizeInfo : A structure that stores the current size and maximum size of the registry. RegistryValueInfo : A structure that stores the type of the registry key (e.g., REG_SZ, REG_DWORD, etc.).","title":"Les Structures :"},{"location":"Torixyna/Registry/Registry.html#class-luna","text":"","title":"Class Luna :"},{"location":"Torixyna/Registry/Registry.html#method-write","text":"Description : Overloaded method for writing to the registry.","title":"Method : Write()"},{"location":"Torixyna/Registry/Registry.html#settings","text":"params1 : The path to the registry key. params2 : The name of the registry key that holds the value. params3 : The value to be stored in the registry.","title":"Settings :"},{"location":"Torixyna/Registry/Registry.html#returned-value","text":"bool : Returns true if the operation was successful.","title":"Returned value :"},{"location":"Torixyna/Registry/Registry.html#example-of-use","text":"#define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::Luna luna(HKEY_CURRENT_USER); // ---------------------------- Write DWORD value in the registry ---------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"testDWORD\"; DWORD value = 12345; if(luna.Write(registryPath, keyName, value) == true){ std::cout << \"Value successfully written\" << \"\\n\"; std::cin.get(); }else{ std::cerr << \"Failed to write value.\" << \"\\n\"; std::cin.get(); } //------------------------------------------------------------------------------------- // ------------------------- Write REG_SZ value in the registry ------------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"testString\"; const wchar_t* value = L\"Alex\"; if(luna.Write(registryPath, keyName, value) == true){ std::cout << \"Value successfully written\" << \"\\n\"; std::cin.get(); }else{ std::cerr << \"Failed to write value.\" << \"\\n\"; std::cin.get(); } // ----------------------------------------------------------------------------------- // ------------------------- Write BINARY value in the registry ---------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"testBinary\"; BYTE value[] = { 0x01, 0x02, 0x03, 0x04 }; if(luna.Write(registryPath, keyName, value) == true){ std::cout << \"Value successfully written\" << \"\\n\"; std::cin.get(); }else{ std::cerr << \"Failed to write value.\" << \"\\n\"; std::cin.get(); } // ------------------------------------------------------------------------------------ // ------------------------ Write QWORD value in the registry ------------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"testQword\"; unsigned __int64 value = 1234567890123456; if(luna.Write(registryPath, keyName, value) == true){ std::cout << \"Value successfully written\" << \"\\n\"; std::cin.get(); }else{ std::cerr << \"Failed to write value.\" << \"\\n\"; std::cin.get(); } // ----------------------------------------------------------------------------------- // -------------------- Write REG_MULTI_SZ value in the registry --------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"MaValeurMultiSZ\"; std::vector<std::wstring> values = {L\"Valeur1\", L\"Valeur2\", L\"Valeur3\"}; if (luna.Write( registryPath, keyName, values) == true){ std::cout << \"Value successfully written\" << \"\\n\"; }else{ std::cout << \"Failed to write value.\" << \"\\n\"; } // ------------------------------------------------------------------------------------- // ------------------- Write REG_EXPAND_SZ value in the registry ----------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"MaValeurExpandSZ\"; if (luna.Write(registryPath, keyName, L\"%SystemRoot%\\\\System32\") == true){ std::cout << \"Value successfully written\" << \"\\n\"; }else{ std::cout << \"Failed to write value.\" << \"\\n\"; } // ------------------------------------------------------------------------------------- return 0; };","title":"Example of use :"},{"location":"Torixyna/Registry/Registry.html#_1","text":"","title":""},{"location":"Torixyna/Registry/Registry.html#method-read","text":"Description : Reads the content of a registry key. This method is overloaded.","title":"Method : Read()"},{"location":"Torixyna/Registry/Registry.html#settings_1","text":"params1 : The path to the registry key. params2 : The name of the registry key holding the value. params3 : A variable to store the value read.","title":"Settings :"},{"location":"Torixyna/Registry/Registry.html#returned-value_1","text":"bool : Returns true if the operation was successful.","title":"Returned value :"},{"location":"Torixyna/Registry/Registry.html#example-of-use_1","text":"#define INCLUDE_REGISTRE #include <iostream> #include <iomanip> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::Luna luna(HKEY_CURRENT_USER); // ------------------------ Read BINARY value ------------------------------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"test\"; std::vector<BYTE> binaryData; if (luna.Read(registryPath, keyName, binaryData)){ std::wcout << L\"Binary value read : \"; for (size_t i = 0; i < binaryData.size(); i++){ std::wcout << std::hex << std::setw(2) << std::setfill(L'0') << (int)binaryData[i] << L\" \"; } std::wcout << std::endl; }else{ std::cout << \"Failed to read binary value.\" << \"\\n\"; } //---------------------------------------------------------------------------------------- //------------------------------ Read REG_MULTI_SZ --------------------------------------- std::vector<std::wstring> values; if (luna.Read(L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", L\"MaValeurMultiSZ\", values)){ std::wcout << L\"Valeur REG_MULTI_SZ lue avec succ\u00e8s :\\n\"; for (const auto& val : values){ std::wcout << L\" - \" << val << \"\\n\"; } }else{ std::wcout << L\"Failed to read REG_MULTI_SZ value.\" << \"\\n\"; } // ----------------------------------------------------------------------------------------- //------------------------------ Read REG_EXPAND_SZ ----------------------------------------- std::wstring value; if (luna.Read(L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", L\"MaValeurExpandSZ\", value)){ std::wcout << L\"Valeur REG_EXPAND_SZ value read : \" << value << \"\\n\"; }else{ std::cout << \"Failed to read REG_EXPAND_SZ value\" << \"\\n\"; } // ------------------------------------------------------------------------------------------- // ----------------------------- Read REG_SZ ------------------------------------------------- const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"OneDrive\"; std::wstring value; if (Read(registryPath, keyName, value)){ std::wcout << L\"wstring Value : \" << value << \"\\n\"; }else{ std::wcout << L\"ERROR\" << \"\\n\"; } // ------------------------------------------------------------------------------------------- //--------------------------------- Read DWORD ------------------------------------------------ DWORD value; if(luna.Read(L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", L\"testDWORD\", value) == true){ std::cout << \"The value is : \" << value << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } // -------------------------------------------------------------------------------------------- // ---------------------------------- Read QWORD ---------------------------------------------- unsigned __int64 val; if(luna.Read(L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", L\"testQword\", val) == true){ std::cout << \"The value is : \" << val << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } // --------------------------------------------------------------------------------------------- return 0; }","title":"Example of use :"},{"location":"Torixyna/Registry/Registry.html#_2","text":"","title":""},{"location":"Torixyna/Registry/Registry.html#method-delete","text":"Description : Deletes a registry key.","title":"Method : Delete()"},{"location":"Torixyna/Registry/Registry.html#settings_2","text":"const wchar_t * Register : The path to the registry key. const WCHAR * NameKey : The name of the registry key to delete.","title":"Settings :"},{"location":"Torixyna/Registry/Registry.html#returned-value_2","text":"bool : Returns true if the operation was successful.","title":"Returned value :"},{"location":"Torixyna/Registry/Registry.html#example-of-use_2","text":"#define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::Luna luna(HKEY_CURRENT_USER); const wchar_t* registryPath = L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"; const wchar_t* keyName = L\"test\"; if(luna.Delete(registryPath, keyName) == true){ std::cout << \"Key successfully deleted\" << \"\\n\"; std::cin.get(); }else{ std::cerr << \"Error\" << \"\\n\"; std::cin.get(); } return 0; }","title":"Example of use :"},{"location":"Torixyna/Registry/Registry.html#class-lunainfo","text":"","title":"Class LunaInfo :"},{"location":"Torixyna/Registry/Registry.html#_3","text":"","title":""},{"location":"Torixyna/Registry/Registry.html#method-getsizeregistry","text":"Description : Retrieves the current size and maximum size of the registry, storing the values in the structure passed as a parameter in MB.","title":"Method : GetSizeRegistry()"},{"location":"Torixyna/Registry/Registry.html#settings_3","text":"RegistrySizeInfo& data : A structure holding the current and maximum size values.","title":"Settings :"},{"location":"Torixyna/Registry/Registry.html#returned-value_3","text":"bool : Returns true if the operation was successful.","title":"Returned value :"},{"location":"Torixyna/Registry/Registry.html#example-of-use_3","text":"#define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaInfo luna(HKEY_CURRENT_USER); Torixyna::Registry::RegistrySizeInfo info; if(luna.GetSizeRegistry(info) == true){ std::cout << \"Current size : \" << info.currentSize << \"\\n\"; std::cout << \"Maximum size : \" << info.maxSize << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } return 0; }","title":"Example of use :"},{"location":"Torixyna/Registry/Registry.html#_4","text":"","title":""},{"location":"Torixyna/Registry/Registry.html#method-getregistertypevalue","text":"Description : Retrieves the type of value stored in a registry key (e.g., REG_SZ, REG_DWORD, REG_BINARY, REG_QWORD, REG_MULTI_SZ, REG_EXPAND_SZ, REG_NONE, REG_LINK).","title":"Method : GetRegisterTypeValue()"},{"location":"Torixyna/Registry/Registry.html#settings_4","text":"const wchar_t * Register : The path to the registry. const wchar_t* valueName : The name of the key to check. RegistryValueInfo& data : A structure that stores the type of value stored in the registry key.","title":"Settings :"},{"location":"Torixyna/Registry/Registry.html#returned-value_4","text":"bool : Returns true if the operation was successful.","title":"Returned value :"},{"location":"Torixyna/Registry/Registry.html#example-of-use_4","text":"#define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaInfo luna(HKEY_CURRENT_USER); Torixyna::Registry::RegistryValueInfo info; if (luna.GetRegisterTypeValue(L\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", L\"testQword\", info) == true){ if(info.valueNameT == REG_QWORD){ std::cout << \"The value is a QWORD\" << \"\\n\"; } } return 0; }","title":"Example of use :"},{"location":"Torixyna/Registry/Registry.html#class-lunaconfig","text":"","title":"class LunaConfig :"},{"location":"Torixyna/Registry/Registry.html#_5","text":"","title":""},{"location":"Torixyna/Registry/Registry.html#method-setsfileextensionsvisibility","text":"Description : This method allows you to enable or disable the visibility of file extensions. If the parameter showExtensions is set to true, the file extensions are displayed. If the parameter is set to false, the file extensions are hidden. The method returns true if everything was successful.","title":"Method : SetsFileExtensionsVisibility()"},{"location":"Torixyna/Registry/Registry.html#settings_5","text":"bool showExtensions : parameter showExtensions.","title":"Settings :"},{"location":"Torixyna/Registry/Registry.html#returned-value_5","text":"bool : The method returns true if everything was successful.","title":"Returned value :"},{"location":"Torixyna/Registry/Registry.html#example-of-use_5","text":"#define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaConfig l; if (l.SetsFileExtensionsVisibility(true)){ std::cout << \"Les extension des fichier sont visible\" << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } return 0; }","title":"Example of use :"},{"location":"Torixyna/Registry/Registry.html#_6","text":"","title":""},{"location":"Torixyna/Registry/Registry.html#method-setsshowitemshide","text":"Description : Sets the visibility of hidden items. If set to true, hidden items are displayed. If set to false, hidden items are not displayed. The method returns false if there is an error, and true if there is no error.","title":"Method : SetsShowItemsHide()"},{"location":"Torixyna/Registry/Registry.html#settings_6","text":"bool Status : parameter Status.","title":"Settings :"},{"location":"Torixyna/Registry/Registry.html#returned-value_6","text":"bool : The method returns false if there is an error, and true if there is no error..","title":"Returned value :"},{"location":"Torixyna/Registry/Registry.html#example-of-use_6","text":"#define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaConfig l; if (l.SetsShowItemsHide(true)){ std::cout << \"affiche les \u00e9l\u00e9ments masquer\" << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } return 0; }","title":"Example of use :"},{"location":"Torixyna/Registry/Registry.html#_7","text":"","title":""},{"location":"Torixyna/Registry/Registry.html#method-setsthestatusofcheckboxes","text":"Description : Sets the status of checkboxes. Activates checkboxes if the 'Status' parameter is set to true. Deactivates checkboxes if the 'Status' parameter is set to false. This method returns true if the operation is successful.","title":"Method : SetsTheStatusOfCheckboxes()"},{"location":"Torixyna/Registry/Registry.html#settings_7","text":"bool Status : parameter Status.","title":"Settings :"},{"location":"Torixyna/Registry/Registry.html#returned-value_7","text":"bool : This method returns true if the operation is successful.","title":"Returned value :"},{"location":"Torixyna/Registry/Registry.html#example-of-use_7","text":"#define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaConfig l; if (l.SetsTheStatusOfCheckboxes(true)){ std::cout << \"Les cases \u00e0 coch\u00e9 sont activer\" << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } return 0; }","title":"Example of use :"},{"location":"Torixyna/Registry/Registry.html#_8","text":"","title":""},{"location":"Torixyna/Registry/Registry.html#method-setwallpaper","text":"Description : Method to set the wallpaper This method takes the image path as a parameter. It returns false if there is an error and true if everything goes well.","title":"Method : SetWallpaper()"},{"location":"Torixyna/Registry/Registry.html#settings_8","text":"const std::wstring& imagePath : Attend le chemin ver l'image.","title":"Settings :"},{"location":"Torixyna/Registry/Registry.html#returned-value_8","text":"bool : This method returns true if the operation is successful.","title":"Returned value :"},{"location":"Torixyna/Registry/Registry.html#example-of-use_8","text":"#define INCLUDE_REGISTRE #include <iostream> #include <Torixyna/Torixyna.hpp> int main(){ SetConsoleOutputCP(CP_UTF8); Torixyna::Registry::LunaConfig l; const wchar_t* pathWalpper = L\"Background.jpg\"; if (l.SetWallpaper(pathWalpper)){ std::cout << \"Le fond d'\u00e9cran \u00e0 bien \u00e9t\u00e9 modifier\" << \"\\n\"; }else{ std::cout << \"Error\" << \"\\n\"; } return 0; }","title":"Example of use :"},{"location":"Torixyna/Registry/description.html","text":"Torixyna::Registry Module The Torixyna::Registry module provides a set of utilities for interacting with the Windows Registry. It allows developers to easily read, write, and manage registry keys and values, including various data types such as strings, DWORDs, binary data, and more. This module is designed to simplify registry operations and provide efficient access to registry-related tasks in Windows-based applications. Key Features: Registry Management : Write, read, and delete registry keys and values in different data formats such as REG_SZ , REG_DWORD , REG_BINARY , REG_QWORD , REG_MULTI_SZ , and REG_EXPAND_SZ . Registry Size Info : Retrieve the current size of the registry and the maximum allowed size. Registry Value Type Info : Get the type of a registry value and handle errors related to unknown value types. System Configuration : Manage system settings such as file extension visibility, hidden items visibility, checkbox status, and even set the system wallpaper.","title":"Torixyna::Registry Module"},{"location":"Torixyna/Registry/description.html#torixynaregistry-module","text":"The Torixyna::Registry module provides a set of utilities for interacting with the Windows Registry. It allows developers to easily read, write, and manage registry keys and values, including various data types such as strings, DWORDs, binary data, and more. This module is designed to simplify registry operations and provide efficient access to registry-related tasks in Windows-based applications.","title":"Torixyna::Registry Module"},{"location":"Torixyna/Registry/description.html#key-features","text":"Registry Management : Write, read, and delete registry keys and values in different data formats such as REG_SZ , REG_DWORD , REG_BINARY , REG_QWORD , REG_MULTI_SZ , and REG_EXPAND_SZ . Registry Size Info : Retrieve the current size of the registry and the maximum allowed size. Registry Value Type Info : Get the type of a registry value and handle errors related to unknown value types. System Configuration : Manage system settings such as file extension visibility, hidden items visibility, checkbox status, and even set the system wallpaper.","title":"Key Features:"},{"location":"Torixyna/Speaker/Speaker.html","text":"Speaker Module Description The Speaker module allows you to manage the PC volume simply and efficiently. Features Retrieve the current volume. Check the volume state to determine if it is muted or not. Modify the volume state (mute or unmute). Adjust the volume level between 0.0f and 100.0f . Compilation To use the Speaker module, you must compile your program with the following options: g++ -O2 -Os -s -o test.exe test.cpp -lTorixyna -lole32 -lstdc++ -luuid & color Method : getVolume() Description : Allows you to retrieve the current volume value. Settings : None : No settings. Returned value : float : Returns the current volume. Example of use : #define INCLUDE_SPEAKER #include <Torixyna/Torixyna.hpp> int main(){ Torixyna::Speaker::Speaker sound; float resultat = sound.getVolume(); std::cout << resultat << std::endl; return 0; } Method : setVolume() Description : Allows you to set the volume level of the audio device. This function takes a float number between 0 and 100, representing volume as a percentage. Settings : float volume : The volume to define must be a number between 0.0 and 100.0 (inclusive). Returned value : bool : Returns true if the volume was correctly modified, false in case of error. Example of use : #define INCLUDE_SPEAKER #include <Torixyna/Torixyna.hpp> int main(){ Torixyna::Speaker::Speaker sound; if(sound.setVolume(50.0f) == true){ std::cout << \"Sucess\" << std::endl; }else{ std::cout << \"Error\" << std::endl; } return 0; } Method : isMuted() Description : Returns whether the audio device is currently muted or not. This function checks if the sound is muted and returns a boolean value. Settings : None : No parameters.. Returned value : bool : Returns true if the audio is muted, false if it is not muted. Example of use : #define INCLUDE_SPEAKER #include <Torixyna/Torixyna.hpp> int main(){ Torixyna::Speaker::Speaker sound; if (sound.isMuted() == true){ std::cout << \"The audio is muted.\" << std::endl; }else{ std::cout << \"The audio is not muted.\" << std::endl; } return 0; } Method : setMute() Description : Sets the mute status of the audio device. This function allows you to mute or unmute the audio depending on the value passed to it. Settings : bool mute : A boolean value. Pass true to mute the audio, or false to unmute it. Returned value : bool : Returns true if the mute status was successfully set, false in case of an error. Example of use : #define INCLUDE_SPEAKER #include <Torixyna/Torixyna.hpp> int main(){ Torixyna::Speaker::Speaker sound; // Mute the audio if (sound.setMute(true)){ std::cout << \"The audio has been muted.\" << std::endl; }else{ std::cout << \"Failed to mute the audio.\" << std::endl; } // Unmute the audio if (sound.setMute(false)){ std::cout << \"The audio has been unmuted.\" << std::endl; }else{ std::cout << \"Failed to unmute the audio.\" << std::endl; } return 0; }","title":"Speaker Module"},{"location":"Torixyna/Speaker/Speaker.html#speaker-module","text":"","title":"Speaker Module"},{"location":"Torixyna/Speaker/Speaker.html#description","text":"The Speaker module allows you to manage the PC volume simply and efficiently.","title":"Description"},{"location":"Torixyna/Speaker/Speaker.html#features","text":"Retrieve the current volume. Check the volume state to determine if it is muted or not. Modify the volume state (mute or unmute). Adjust the volume level between 0.0f and 100.0f .","title":"Features"},{"location":"Torixyna/Speaker/Speaker.html#compilation","text":"To use the Speaker module, you must compile your program with the following options: g++ -O2 -Os -s -o test.exe test.cpp -lTorixyna -lole32 -lstdc++ -luuid & color","title":"Compilation"},{"location":"Torixyna/Speaker/Speaker.html#method-getvolume","text":"Description : Allows you to retrieve the current volume value.","title":"Method : getVolume()"},{"location":"Torixyna/Speaker/Speaker.html#settings","text":"None : No settings.","title":"Settings :"},{"location":"Torixyna/Speaker/Speaker.html#returned-value","text":"float : Returns the current volume.","title":"Returned value :"},{"location":"Torixyna/Speaker/Speaker.html#example-of-use","text":"#define INCLUDE_SPEAKER #include <Torixyna/Torixyna.hpp> int main(){ Torixyna::Speaker::Speaker sound; float resultat = sound.getVolume(); std::cout << resultat << std::endl; return 0; }","title":"Example of use :"},{"location":"Torixyna/Speaker/Speaker.html#_1","text":"","title":""},{"location":"Torixyna/Speaker/Speaker.html#method-setvolume","text":"Description : Allows you to set the volume level of the audio device. This function takes a float number between 0 and 100, representing volume as a percentage.","title":"Method : setVolume()"},{"location":"Torixyna/Speaker/Speaker.html#settings_1","text":"float volume : The volume to define must be a number between 0.0 and 100.0 (inclusive).","title":"Settings :"},{"location":"Torixyna/Speaker/Speaker.html#returned-value_1","text":"bool : Returns true if the volume was correctly modified, false in case of error.","title":"Returned value :"},{"location":"Torixyna/Speaker/Speaker.html#example-of-use_1","text":"#define INCLUDE_SPEAKER #include <Torixyna/Torixyna.hpp> int main(){ Torixyna::Speaker::Speaker sound; if(sound.setVolume(50.0f) == true){ std::cout << \"Sucess\" << std::endl; }else{ std::cout << \"Error\" << std::endl; } return 0; }","title":"Example of use :"},{"location":"Torixyna/Speaker/Speaker.html#_2","text":"","title":""},{"location":"Torixyna/Speaker/Speaker.html#method-ismuted","text":"Description : Returns whether the audio device is currently muted or not. This function checks if the sound is muted and returns a boolean value.","title":"Method : isMuted()"},{"location":"Torixyna/Speaker/Speaker.html#settings_2","text":"None : No parameters..","title":"Settings :"},{"location":"Torixyna/Speaker/Speaker.html#returned-value_2","text":"bool : Returns true if the audio is muted, false if it is not muted.","title":"Returned value :"},{"location":"Torixyna/Speaker/Speaker.html#example-of-use_2","text":"#define INCLUDE_SPEAKER #include <Torixyna/Torixyna.hpp> int main(){ Torixyna::Speaker::Speaker sound; if (sound.isMuted() == true){ std::cout << \"The audio is muted.\" << std::endl; }else{ std::cout << \"The audio is not muted.\" << std::endl; } return 0; }","title":"Example of use :"},{"location":"Torixyna/Speaker/Speaker.html#_3","text":"","title":""},{"location":"Torixyna/Speaker/Speaker.html#method-setmute","text":"Description : Sets the mute status of the audio device. This function allows you to mute or unmute the audio depending on the value passed to it.","title":"Method : setMute()"},{"location":"Torixyna/Speaker/Speaker.html#settings_3","text":"bool mute : A boolean value. Pass true to mute the audio, or false to unmute it.","title":"Settings :"},{"location":"Torixyna/Speaker/Speaker.html#returned-value_3","text":"bool : Returns true if the mute status was successfully set, false in case of an error.","title":"Returned value :"},{"location":"Torixyna/Speaker/Speaker.html#example-of-use_3","text":"#define INCLUDE_SPEAKER #include <Torixyna/Torixyna.hpp> int main(){ Torixyna::Speaker::Speaker sound; // Mute the audio if (sound.setMute(true)){ std::cout << \"The audio has been muted.\" << std::endl; }else{ std::cout << \"Failed to mute the audio.\" << std::endl; } // Unmute the audio if (sound.setMute(false)){ std::cout << \"The audio has been unmuted.\" << std::endl; }else{ std::cout << \"Failed to unmute the audio.\" << std::endl; } return 0; }","title":"Example of use :"},{"location":"Torixyna/Speaker/description.html","text":"Windows Speaker Management Module This module allows you to easily and efficiently manage the audio settings of your Windows system. It offers the ability to control the speaker volume, including increasing, decreasing, and muting the sound. With its flexible features, it lets you customize your audio experience directly from your application while providing full control over the audio level. Key Features: Volume Adjustment : Increase or decrease the system volume smoothly and precisely. Mute : Easily enable or disable the mute function for your speakers. Dynamic Control : Adjust the volume in real-time according to your preferences with quick and reliable responsiveness. Full Windows Compatibility : Uses Windows native APIs for direct and seamless control of audio devices. Use Cases: This module integrates perfectly into applications where audio control is essential, such as: - Multimedia Software : Volume management during video or music playback. - Communication Applications : Adjusting volume during voice or video calls. - Custom Applications : Any program requiring direct access to Windows audio settings. Benefits: Ease of Use : Simple and functional, ideal for developers. Performance : Fast and responsive sound control with no noticeable latency. Seamless Integration : Perfectly integrates into any Windows application without complex setup.","title":"Windows Speaker Management Module"},{"location":"Torixyna/Speaker/description.html#windows-speaker-management-module","text":"This module allows you to easily and efficiently manage the audio settings of your Windows system. It offers the ability to control the speaker volume, including increasing, decreasing, and muting the sound. With its flexible features, it lets you customize your audio experience directly from your application while providing full control over the audio level.","title":"Windows Speaker Management Module"},{"location":"Torixyna/Speaker/description.html#key-features","text":"Volume Adjustment : Increase or decrease the system volume smoothly and precisely. Mute : Easily enable or disable the mute function for your speakers. Dynamic Control : Adjust the volume in real-time according to your preferences with quick and reliable responsiveness. Full Windows Compatibility : Uses Windows native APIs for direct and seamless control of audio devices.","title":"Key Features:"},{"location":"Torixyna/Speaker/description.html#use-cases","text":"This module integrates perfectly into applications where audio control is essential, such as: - Multimedia Software : Volume management during video or music playback. - Communication Applications : Adjusting volume during voice or video calls. - Custom Applications : Any program requiring direct access to Windows audio settings.","title":"Use Cases:"},{"location":"Torixyna/Speaker/description.html#benefits","text":"Ease of Use : Simple and functional, ideal for developers. Performance : Fast and responsive sound control with no noticeable latency. Seamless Integration : Perfectly integrates into any Windows application without complex setup.","title":"Benefits:"}]}